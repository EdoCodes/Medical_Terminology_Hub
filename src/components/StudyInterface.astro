---
interface Props {
  terms: any[];
  category?: string;
}

const { terms, category = 'all' } = Astro.props;
---

<div class="study-interface">
  <!-- Left Sidebar -->
  <aside class="left-sidebar">
    <div class="sidebar-section">
      <h3 class="sidebar-title">Study Progress</h3>
      <div class="progress-stats">
        <div class="stat-card">
          <div class="stat-number" id="currentCard">1</div>
          <div class="stat-label">Current</div>
        </div>
        <div class="stat-card">
          <div class="stat-number" id="totalCards">{terms.length}</div>
          <div class="stat-label">Total</div>
        </div>
        <div class="stat-card">
          <div class="stat-number" id="correctCount">0</div>
          <div class="stat-label">Correct</div>
        </div>
      </div>
      
      <div class="progress-bar">
        <div class="progress-fill" id="progressFill" style="width: 0%"></div>
      </div>
      <div class="progress-text">
        <span id="progressPercent">0%</span> Complete
      </div>
    </div>

    <div class="sidebar-section">
      <h3 class="sidebar-title">Study Options</h3>
      <div class="study-controls">
        <button class="control-btn" id="shuffleBtn">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
            <polyline points="16,3 21,3 21,8"/>
            <line x1="4" y1="20" x2="21" y2="3"/>
            <polyline points="21,16 21,21 16,21"/>
            <line x1="15" y1="15" x2="21" y2="21"/>
            <line x1="4" y1="4" x2="9" y2="9"/>
          </svg>
          Shuffle Cards
        </button>
        
        <button class="control-btn" id="resetBtn">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
            <polyline points="23,4 23,10 17,10"/>
            <polyline points="1,20 1,14 7,14"/>
            <path d="M20.5,10A8.5,8.5,0,0,0,4,7.5"/>
            <path d="M3.5,14A8.5,8.5,0,0,0,20,16.5"/>
          </svg>
          Restart
        </button>

        <div class="filter-section">
          <label class="filter-label">Difficulty</label>
          <select class="filter-select" id="difficultyFilter">
            <option value="all">All Levels</option>
            <option value="basic">Basic</option>
            <option value="intermediate">Intermediate</option>
            <option value="advanced">Advanced</option>
          </select>
        </div>
      </div>
    </div>

    <div class="sidebar-section">
      <h3 class="sidebar-title">Categories</h3>
      <nav class="category-nav">
        <a href="/" class={`category-link ${category === 'all' ? 'active' : ''}`}>
          <span class="category-icon">üìö</span>
          All Terms
        </a>
        <a href="/cardiovascular" class={`category-link ${category === 'cardiovascular' ? 'active' : ''}`}>
          <span class="category-icon">‚ù§Ô∏è</span>
          Cardiovascular
        </a>
        <a href="/respiratory" class={`category-link ${category === 'respiratory' ? 'active' : ''}`}>
          <span class="category-icon">ü´Å</span>
          Respiratory
        </a>
        <a href="/neurology" class={`category-link ${category === 'neurology' ? 'active' : ''}`}>
          <span class="category-icon">üß†</span>
          Neurology
        </a>
        <a href="/dermatology" class={`category-link ${category === 'dermatology' ? 'active' : ''}`}>
          <span class="category-icon">ü©∫</span>
          Dermatology
        </a>
        <a href="/musculoskeletal" class={`category-link ${category === 'musculoskeletal' ? 'active' : ''}`}>
          <span class="category-icon">ü¶¥</span>
          Musculoskeletal
        </a>
        <a href="/gastroenterology" class={`category-link ${category === 'gastroenterology' ? 'active' : ''}`}>
          <span class="category-icon">ü´É</span>
          Gastroenterology
        </a>
      </nav>
    </div>
  </aside>

  <!-- Main Study Area -->
  <main class="study-main">
    <div class="study-header">
      <h1 class="study-title">
        {category === 'all' ? 'All Medical Terms' : category.charAt(0).toUpperCase() + category.slice(1)}
      </h1>
      <div class="study-navigation">
        <button class="nav-btn" id="prevBtn" disabled>
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
            <polyline points="15,18 9,12 15,6"/>
          </svg>
          Previous
        </button>
        <button class="nav-btn primary" id="nextBtn">
          Next
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
            <polyline points="9,18 15,12 9,6"/>
          </svg>
        </button>
      </div>
    </div>

    <div class="flashcard-container" id="flashcardContainer">
      <!-- Flashcards will be inserted here -->
    </div>

    <div class="study-footer">
      <div class="study-tips">
        <h4>üí° Study Tip</h4>
        <p id="studyTip">Click on a flashcard to reveal its definition. Use "Got It!" for terms you know well.</p>
      </div>
    </div>
  </main>

  <!-- Right Sidebar -->
  <aside class="right-sidebar">
    <div class="sidebar-section">
      <h3 class="sidebar-title">Session Stats</h3>
      <div class="session-stats">
        <div class="session-stat">
          <div class="session-number" id="sessionCorrect">0</div>
          <div class="session-label">Correct</div>
        </div>
        <div class="session-stat">
          <div class="session-number" id="sessionReview">0</div>
          <div class="session-label">Review</div>
        </div>
        <div class="session-stat">
          <div class="session-number" id="sessionAccuracy">0%</div>
          <div class="session-label">Accuracy</div>
        </div>
      </div>
    </div>

    <div class="sidebar-section">
      <h3 class="sidebar-title">Quick Actions</h3>
      <div class="quick-actions">
        <a href="/blog" class="action-link">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
            <path d="M14,2H6A2,2,0,0,0,4,4V20a2,2,0,0,0,2,2H18a2,2,0,0,0,2-2V8Z"/>
            <polyline points="14,2 14,8 20,8"/>
            <line x1="16" y1="13" x2="8" y2="13"/>
            <line x1="16" y1="17" x2="8" y2="17"/>
          </svg>
          Medical Blog
        </a>
        <a href="/admin/login" class="action-link admin">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
            <rect x="3" y="11" width="18" height="11" rx="2" ry="2"/>
            <circle cx="12" cy="16" r="1"/>
            <path d="m7 11V7a5 5 0 0 1 10 0v4"/>
          </svg>
          Admin Panel
        </a>
      </div>
    </div>

    <div class="sidebar-section">
      <h3 class="sidebar-title">Study Streak</h3>
      <div class="streak-display">
        <div class="streak-number" id="streakDays">0</div>
        <div class="streak-label">Days</div>
        <div class="streak-message">Keep it up! üî•</div>
      </div>
    </div>
  </aside>
</div>

<style>
  .study-interface {
    display: grid;
    grid-template-columns: 280px 1fr 260px;
    gap: 24px;
    max-width: 1400px;
    margin: 0 auto;
    padding: 24px 20px;
    min-height: calc(100vh - 140px);
  }

  /* Sidebars */
  .left-sidebar,
  .right-sidebar {
    background: white;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    border: 1px solid #e5e7eb;
    height: fit-content;
    position: sticky;
    top: 94px;
  }

  .sidebar-section {
    padding: 20px;
    border-bottom: 1px solid #f3f4f6;
  }

  .sidebar-section:last-child {
    border-bottom: none;
  }

  .sidebar-title {
    font-size: 16px;
    font-weight: 600;
    color: #1f2937;
    margin: 0 0 16px 0;
  }

  /* Progress Stats */
  .progress-stats {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    gap: 12px;
    margin-bottom: 20px;
  }

  .stat-card {
    text-align: center;
    padding: 12px 8px;
    background: #f9fafb;
    border-radius: 8px;
  }

  .stat-number {
    font-size: 20px;
    font-weight: 600;
    color: #1f2937;
  }

  .stat-label {
    font-size: 11px;
    color: #6b7280;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    margin-top: 4px;
  }

  .progress-bar {
    width: 100%;
    height: 6px;
    background: #e5e7eb;
    border-radius: 3px;
    overflow: hidden;
    margin-bottom: 8px;
  }

  .progress-fill {
    height: 100%;
    background: #4A90E2;
    border-radius: 3px;
    transition: width 0.3s ease;
  }

  .progress-text {
    font-size: 13px;
    color: #6b7280;
    text-align: center;
  }

  /* Study Controls */
  .study-controls {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }

  .control-btn {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 10px 12px;
    background: white;
    border: 1px solid #d1d5db;
    border-radius: 6px;
    font-size: 13px;
    font-weight: 500;
    color: #374151;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .control-btn:hover {
    background: #f9fafb;
    border-color: #9ca3af;
  }

  .control-btn svg {
    width: 16px;
    height: 16px;
  }

  .filter-section {
    margin-top: 16px;
  }

  .filter-label {
    display: block;
    font-size: 12px;
    font-weight: 500;
    color: #6b7280;
    margin-bottom: 6px;
  }

  .filter-select {
    width: 100%;
    padding: 8px 10px;
    border: 1px solid #d1d5db;
    border-radius: 6px;
    font-size: 13px;
    background: white;
    color: #374151;
  }

  /* Category Navigation */
  .category-nav {
    display: flex;
    flex-direction: column;
    gap: 4px;
  }

  .category-link {
    display: flex;
    align-items: center;
    gap: 10px;
    padding: 10px 12px;
    text-decoration: none;
    color: #6b7280;
    border-radius: 6px;
    font-size: 13px;
    font-weight: 500;
    transition: all 0.2s ease;
  }

  .category-link:hover {
    background: #f3f4f6;
    color: #374151;
  }

  .category-link.active {
    background: #eff6ff;
    color: #2563eb;
  }

  .category-icon {
    font-size: 16px;
  }

  /* Main Study Area */
  .study-main {
    background: white;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    border: 1px solid #e5e7eb;
    display: flex;
    flex-direction: column;
    min-height: 600px;
  }

  .study-header {
    padding: 24px;
    border-bottom: 1px solid #e5e7eb;
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  .study-title {
    font-size: 24px;
    font-weight: 600;
    color: #1f2937;
    margin: 0;
  }

  .study-navigation {
    display: flex;
    gap: 12px;
  }

  .nav-btn {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 10px 16px;
    border: 1px solid #d1d5db;
    border-radius: 8px;
    background: white;
    color: #374151;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .nav-btn:hover:not(:disabled) {
    background: #f9fafb;
    border-color: #9ca3af;
  }

  .nav-btn.primary {
    background: #4A90E2;
    color: white;
    border-color: #4A90E2;
  }

  .nav-btn.primary:hover {
    background: #3b82f6;
  }

  .nav-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .nav-btn svg {
    width: 16px;
    height: 16px;
  }

  .flashcard-container {
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 40px 24px;
  }

  .study-footer {
    padding: 20px 24px;
    border-top: 1px solid #e5e7eb;
    background: #f9fafb;
    border-radius: 0 0 12px 12px;
  }

  .study-tips h4 {
    font-size: 14px;
    font-weight: 600;
    color: #374151;
    margin: 0 0 6px 0;
  }

  .study-tips p {
    font-size: 13px;
    color: #6b7280;
    margin: 0;
    line-height: 1.4;
  }

  /* Right Sidebar */
  .session-stats {
    display: flex;
    flex-direction: column;
    gap: 16px;
  }

  .session-stat {
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  .session-number {
    font-size: 18px;
    font-weight: 600;
    color: #1f2937;
  }

  .session-label {
    font-size: 12px;
    color: #6b7280;
  }

  .quick-actions {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  .action-link {
    display: flex;
    align-items: center;
    gap: 10px;
    padding: 10px 12px;
    text-decoration: none;
    color: #374151;
    border: 1px solid #e5e7eb;
    border-radius: 6px;
    font-size: 13px;
    font-weight: 500;
    transition: all 0.2s ease;
  }

  .action-link:hover {
    background: #f3f4f6;
    border-color: #d1d5db;
  }

  .action-link.admin {
    color: #6b7280;
    border-style: dashed;
  }

  .action-link svg {
    width: 16px;
    height: 16px;
  }

  .streak-display {
    text-align: center;
  }

  .streak-number {
    font-size: 32px;
    font-weight: 700;
    color: #f59e0b;
  }

  .streak-label {
    font-size: 12px;
    color: #6b7280;
    margin-bottom: 8px;
  }

  .streak-message {
    font-size: 11px;
    color: #6b7280;
  }

  /* Responsive Design */
  @media (max-width: 1200px) {
    .study-interface {
      grid-template-columns: 1fr;
      gap: 16px;
    }

    .left-sidebar,
    .right-sidebar {
      position: static;
      display: none;
    }
  }

  @media (max-width: 768px) {
    .study-interface {
      padding: 16px;
    }

    .study-header {
      flex-direction: column;
      gap: 16px;
      align-items: stretch;
    }

    .study-title {
      font-size: 20px;
      text-align: center;
    }

    .study-navigation {
      justify-content: center;
    }

    .flashcard-container {
      padding: 24px 16px;
    }
  }
</style>

<script is:inline define:vars={{ terms, category }}>
  let currentIndex = 0;
  let studyTerms = [...terms];
  let sessionStats = { correct: 0, review: 0, total: 0 };

  function initializeStudyInterface() {
    updateDisplay();
    updateStats();
    
    // Navigation buttons
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    const shuffleBtn = document.getElementById('shuffleBtn');
    const resetBtn = document.getElementById('resetBtn');
    const difficultyFilter = document.getElementById('difficultyFilter');

    if (prevBtn) prevBtn.addEventListener('click', previousCard);
    if (nextBtn) nextBtn.addEventListener('click', nextCard);
    if (shuffleBtn) shuffleBtn.addEventListener('click', shuffleCards);
    if (resetBtn) resetBtn.addEventListener('click', resetStudy);
    if (difficultyFilter) difficultyFilter.addEventListener('change', filterByDifficulty);

    // Make nextCard available globally
    window.nextCard = nextCard;
  }

  function updateDisplay() {
    const container = document.getElementById('flashcardContainer');
    const currentCardEl = document.getElementById('currentCard');
    const totalCardsEl = document.getElementById('totalCards');
    const progressFill = document.getElementById('progressFill');
    const progressPercent = document.getElementById('progressPercent');
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');

    if (container && studyTerms.length > 0) {
      const term = studyTerms[currentIndex];
      container.innerHTML = `
        <div class="clean-flashcard" data-term-id="${term.id}">
          <div class="flashcard-inner">
            <div class="flashcard-front active">
              <div class="flashcard-header">
                <span class="difficulty-badge ${term.difficulty}">
                  ${term.difficulty.toUpperCase()}
                </span>
              </div>
              <div class="flashcard-content">
                <h2 class="term-text">${term.term}</h2>
                <div class="reveal-prompt">
                  <svg class="click-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                    <path d="M15 3h4a2 2 0 0 1 2 2v4m-6 9l4-4-4-4m-6 4h14"/>
                  </svg>
                  <span>Click to reveal definition</span>
                </div>
              </div>
            </div>
            <div class="flashcard-back">
              <div class="flashcard-header">
                <button class="back-btn">
                  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                    <path d="M19 12H5m7 7-7-7 7-7"/>
                  </svg>
                  Back
                </button>
              </div>
              <div class="flashcard-content">
                <h3 class="definition-label">Definition</h3>
                <p class="definition-text">${term.definition}</p>
                ${term.example ? `
                  <div class="example-section">
                    <h4 class="example-label">Clinical Example</h4>
                    <p class="example-text">${term.example}</p>
                  </div>
                ` : ''}
                <div class="study-actions">
                  <button class="study-btn correct" data-action="correct">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                      <polyline points="20,6 9,17 4,12"/>
                    </svg>
                    Got It!
                  </button>
                  <button class="study-btn review" data-action="review">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                      <path d="M1 4v6h6m16 4v6h-6M21 12c0 5-4 9-9 9s-9-4-9-9 4-9 9-9 9 4 9 9z"/>
                    </svg>
                    Review Again
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      `;

      // Reinitialize flashcard functionality
      const event = new Event('flashcardsLoaded');
      document.dispatchEvent(event);
    }

    if (currentCardEl) currentCardEl.textContent = currentIndex + 1;
    if (totalCardsEl) totalCardsEl.textContent = studyTerms.length;

    const progress = studyTerms.length > 0 ? ((currentIndex + 1) / studyTerms.length) * 100 : 0;
    if (progressFill) progressFill.style.width = `${progress}%`;
    if (progressPercent) progressPercent.textContent = `${Math.round(progress)}%`;

    if (prevBtn) prevBtn.disabled = currentIndex === 0;
    if (nextBtn) nextBtn.disabled = currentIndex === studyTerms.length - 1;
  }

  function nextCard() {
    if (currentIndex < studyTerms.length - 1) {
      currentIndex++;
      updateDisplay();
    }
  }

  function previousCard() {
    if (currentIndex > 0) {
      currentIndex--;
      updateDisplay();
    }
  }

  function shuffleCards() {
    for (let i = studyTerms.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [studyTerms[i], studyTerms[j]] = [studyTerms[j], studyTerms[i]];
    }
    currentIndex = 0;
    updateDisplay();
  }

  function resetStudy() {
    currentIndex = 0;
    sessionStats = { correct: 0, review: 0, total: 0 };
    studyTerms = [...terms];
    updateDisplay();
    updateStats();
  }

  function filterByDifficulty() {
    const filter = document.getElementById('difficultyFilter').value;
    if (filter === 'all') {
      studyTerms = [...terms];
    } else {
      studyTerms = terms.filter(term => term.difficulty === filter);
    }
    currentIndex = 0;
    updateDisplay();
  }

  function updateStats() {
    const sessionCorrect = document.getElementById('sessionCorrect');
    const sessionReview = document.getElementById('sessionReview');
    const sessionAccuracy = document.getElementById('sessionAccuracy');

    if (sessionCorrect) sessionCorrect.textContent = sessionStats.correct;
    if (sessionReview) sessionReview.textContent = sessionStats.review;
    
    if (sessionAccuracy) {
      const total = sessionStats.correct + sessionStats.review;
      const accuracy = total > 0 ? Math.round((sessionStats.correct / total) * 100) : 0;
      sessionAccuracy.textContent = `${accuracy}%`;
    }
  }

  // Listen for study actions from flashcards
  document.addEventListener('click', function(e) {
    if (e.target.matches('.study-btn')) {
      const action = e.target.getAttribute('data-action');
      if (action === 'correct') {
        sessionStats.correct++;
      } else if (action === 'review') {
        sessionStats.review++;
      }
      updateStats();
    }
  });

  document.addEventListener('DOMContentLoaded', initializeStudyInterface);
</script>