---
interface Props {
  terms: any[];
  category?: string;
}

const { terms, category = 'all' } = Astro.props;
---

<div class="study-interface">
  <!-- Search Bar -->
  <div class="search-section">
    <div class="search-container">
      <input 
        type="text" 
        id="searchInput" 
        class="search-input" 
        placeholder="Search medical terms..."
      >
      <button class="search-btn" id="searchBtn">Search</button>
    </div>
  </div>

  <!-- Flashcard Container -->
  <div class="flashcard-container">
    <div class="flashcard" id="flashcard">
      <div class="flashcard-inner" id="flashcardInner">
        <div class="flashcard-front">
          <div class="card-header">
            <span class="card-counter" id="cardCounter">1 / 30</span>
          </div>
          <div class="card-content">
            <h1 class="medical-term" id="medicalTerm">Loading...</h1>
            <p class="click-hint">Click to reveal definition</p>
          </div>
        </div>
        <div class="flashcard-back">
          <div class="card-header">
            <span class="card-counter" id="cardCounterBack">1 / 30</span>
          </div>
          <div class="card-content">
            <p class="definition" id="definition">Loading definition...</p>
            <div class="example-section" id="exampleSection" style="display: none;">
              <h4>Example</h4>
              <p class="example" id="example"></p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Navigation -->
  <div class="navigation">
    <button class="nav-btn" id="prevBtn">← Previous</button>
    <button class="nav-btn shuffle-btn" id="shuffleBtn">Shuffle</button>
    <button class="nav-btn" id="nextBtn">Next →</button>
  </div>
</div>

<style>
  .study-interface {
    max-width: 900px;
    margin: 0 auto;
    padding: 20px;
  }

  /* Search Section */
  .search-section {
    background: linear-gradient(135deg, #f1f5f9 0%, #e2e8f0 100%);
    border-radius: 12px;
    padding: 24px;
    margin-bottom: 40px;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  }

  .search-container {
    display: flex;
    gap: 12px;
    max-width: 600px;
    margin: 0 auto;
  }

  .search-input {
    flex: 1;
    padding: 12px 16px;
    border: 1px solid #d1d5db;
    border-radius: 8px;
    font-size: 16px;
    background: white;
    transition: all 0.2s ease;
  }

  .search-input:focus {
    outline: none;
    border-color: #4A90E2;
    box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.1);
  }

  .search-btn {
    padding: 12px 24px;
    background: #4A90E2;
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .search-btn:hover {
    background: #3b82f6;
    transform: translateY(-1px);
  }

  /* Flashcard Container */
  .flashcard-container {
    display: flex;
    justify-content: center;
    margin-bottom: 32px;
  }

  .flashcard {
    width: 600px;
    height: 350px;
    perspective: 1000px;
    cursor: pointer;
  }

  .flashcard-inner {
    position: relative;
    width: 100%;
    height: 100%;
    transition: transform 0.6s;
    transform-style: preserve-3d;
  }

  .flashcard-inner.flipped {
    transform: rotateY(180deg);
  }

  .flashcard-front,
  .flashcard-back {
    position: absolute;
    width: 100%;
    height: 100%;
    backface-visibility: hidden;
    border-radius: 12px;
    background: white;
    border: 1px solid #e5e7eb;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column;
  }

  .flashcard-back {
    transform: rotateY(180deg);
  }

  .card-header {
    background: #4A90E2;
    color: white;
    padding: 16px;
    text-align: center;
    font-weight: 600;
    font-size: 16px;
    border-radius: 12px 12px 0 0;
  }

  .card-content {
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    padding: 40px;
    text-align: center;
  }

  .medical-term {
    font-size: 32px;
    font-weight: 700;
    color: #1f2937;
    margin: 0 0 16px 0;
    line-height: 1.2;
  }

  .click-hint {
    font-size: 14px;
    color: #6b7280;
    font-style: italic;
    margin: 0;
  }

  .definition {
    font-size: 18px;
    color: #374151;
    line-height: 1.6;
    margin: 0 0 20px 0;
  }

  .example-section {
    margin-top: 20px;
    padding-top: 20px;
    border-top: 1px solid #e5e7eb;
    width: 100%;
  }

  .example-section h4 {
    font-size: 14px;
    font-weight: 600;
    color: #4b5563;
    margin: 0 0 8px 0;
  }

  .example {
    font-size: 16px;
    color: #6b7280;
    font-style: italic;
    margin: 0;
    line-height: 1.4;
  }

  /* Navigation */
  .navigation {
    display: flex;
    gap: 16px;
    justify-content: center;
    align-items: center;
  }

  .nav-btn {
    padding: 12px 24px;
    border: 1px solid #d1d5db;
    border-radius: 8px;
    background: white;
    color: #374151;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .nav-btn:hover:not(:disabled) {
    background: #f9fafb;
    border-color: #9ca3af;
  }

  .nav-btn.shuffle-btn {
    background: #4A90E2;
    color: white;
    border-color: #4A90E2;
  }

  .nav-btn.shuffle-btn:hover {
    background: #3b82f6;
    border-color: #3b82f6;
  }

  .nav-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .flashcard {
      width: 100%;
      max-width: 500px;
      height: 300px;
    }
    
    .medical-term {
      font-size: 24px;
    }
    
    .definition {
      font-size: 16px;
    }
    
    .card-content {
      padding: 30px 20px;
    }
  }
</style>

<script is:inline define:vars={{ terms, category }}>
  let currentIndex = 0;
  let studyTerms = [...terms];
  let isFlipped = false;

  function updateFlashcard() {
    if (studyTerms.length === 0) return;
    
    const term = studyTerms[currentIndex];
    const cardCounter = document.getElementById('cardCounter');
    const cardCounterBack = document.getElementById('cardCounterBack');
    const medicalTerm = document.getElementById('medicalTerm');
    const definition = document.getElementById('definition');
    const example = document.getElementById('example');
    const exampleSection = document.getElementById('exampleSection');
    
    // Update counters
    const counterText = `${currentIndex + 1} / ${studyTerms.length}`;
    if (cardCounter) cardCounter.textContent = counterText;
    if (cardCounterBack) cardCounterBack.textContent = counterText;
    
    // Update content
    if (medicalTerm) medicalTerm.textContent = term.term;
    if (definition) definition.textContent = term.definition;
    
    // Handle example
    if (term.example && example && exampleSection) {
      example.textContent = term.example;
      exampleSection.style.display = 'block';
    } else if (exampleSection) {
      exampleSection.style.display = 'none';
    }
    
    // Update button states
    updateButtons();
    
    // Reset flip state
    resetFlip();
  }

  function resetFlip() {
    const flashcardInner = document.getElementById('flashcardInner');
    if (flashcardInner) {
      flashcardInner.classList.remove('flipped');
      isFlipped = false;
    }
  }

  function updateButtons() {
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    
    if (prevBtn) {
      prevBtn.disabled = currentIndex === 0;
    }
    if (nextBtn) {
      nextBtn.disabled = currentIndex === studyTerms.length - 1;
    }
  }

  function nextCard() {
    if (currentIndex < studyTerms.length - 1) {
      currentIndex++;
      updateFlashcard();
    }
  }

  function previousCard() {
    if (currentIndex > 0) {
      currentIndex--;
      updateFlashcard();
    }
  }

  function shuffleCards() {
    for (let i = studyTerms.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [studyTerms[i], studyTerms[j]] = [studyTerms[j], studyTerms[i]];
    }
    currentIndex = 0;
    updateFlashcard();
  }

  function flipCard() {
    const flashcardInner = document.getElementById('flashcardInner');
    if (flashcardInner) {
      if (isFlipped) {
        flashcardInner.classList.remove('flipped');
        isFlipped = false;
      } else {
        flashcardInner.classList.add('flipped');
        isFlipped = true;
      }
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', function() {
    // Update initial display
    updateFlashcard();
    
    // Add event listeners
    const flashcard = document.getElementById('flashcard');
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    const shuffleBtn = document.getElementById('shuffleBtn');
    
    if (flashcard) {
      flashcard.addEventListener('click', flipCard);
    }
    
    if (prevBtn) {
      prevBtn.addEventListener('click', previousCard);
    }
    
    if (nextBtn) {
      nextBtn.addEventListener('click', nextCard);
    }
    
    if (shuffleBtn) {
      shuffleBtn.addEventListener('click', shuffleCards);
    }
  });
</script>