---
// Enhanced prominent SearchBar component
---

<div class="enhanced-search-container">
  <!-- Search Header -->
  <div class="search-header">
    <h2 class="search-title">
      <svg class="search-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
      </svg>
      Find Medical Terms
    </h2>
    <p class="search-subtitle">Search through our comprehensive database of medical terminology</p>
  </div>

  <!-- Main Search Input -->
  <div class="search-input-container">
    <div class="search-input-wrapper">
      <div class="search-input-icon">
        <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
        </svg>
      </div>
      
      <input 
        type="text" 
        id="enhancedSearchInput"
        placeholder="Search for medical terms, definitions, or examples..."
        class="search-input"
        autocomplete="off"
        spellcheck="false"
      />
      
      <button 
        id="clearEnhancedSearch"
        class="clear-btn hidden"
        title="Clear search"
      >
        <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
        </svg>
      </button>
    </div>
    
    <!-- Search Suggestions -->
    <div id="searchSuggestions" class="search-suggestions hidden">
      <div class="suggestions-header">
        <span class="suggestions-title">Quick Suggestions</span>
      </div>
      <div id="suggestionsList" class="suggestions-list">
        <!-- Dynamic suggestions will be inserted here -->
      </div>
    </div>
  </div>

  <!-- Filter Options -->
  <div class="filter-section">
    <div class="filter-group">
      <label class="filter-label">Difficulty Level:</label>
      <div class="filter-buttons">
        <button class="filter-btn filter-btn-active" data-difficulty="all">
          <span class="filter-dot all-dot"></span>
          All Levels
        </button>
        <button class="filter-btn" data-difficulty="basic">
          <span class="filter-dot basic-dot"></span>
          Basic
        </button>
        <button class="filter-btn" data-difficulty="intermediate">
          <span class="filter-dot intermediate-dot"></span>
          Intermediate
        </button>
        <button class="filter-btn" data-difficulty="advanced">
          <span class="filter-dot advanced-dot"></span>
          Advanced
        </button>
      </div>
    </div>
    
    <div class="filter-group">
      <label class="filter-label">Search In:</label>
      <div class="filter-buttons">
        <button class="filter-btn filter-btn-active" data-search-type="all">
          Everything
        </button>
        <button class="filter-btn" data-search-type="terms">
          Terms Only
        </button>
        <button class="filter-btn" data-search-type="definitions">
          Definitions Only
        </button>
        <button class="filter-btn" data-search-type="examples">
          Examples Only
        </button>
      </div>
    </div>
  </div>

  <!-- Search Results -->
  <div id="searchResults" class="search-results hidden">
    <div class="results-header">
      <span id="resultsCount" class="results-count">0 results found</span>
      <button id="closeResults" class="close-results-btn">
        <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
        </svg>
      </button>
    </div>
    <div id="resultsList" class="results-list">
      <!-- Search results will be inserted here -->
    </div>
    <div id="noResults" class="no-results hidden">
      <div class="no-results-icon">
        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
        </svg>
      </div>
      <h3>No results found</h3>
      <p>Try adjusting your search terms or filters</p>
      <div class="search-tips">
        <strong>Search Tips:</strong>
        <ul>
          <li>Use simpler or more general terms</li>
          <li>Check your spelling</li>
          <li>Try searching in all categories</li>
          <li>Use partial words (e.g., "cardio" for cardiovascular terms)</li>
        </ul>
      </div>
    </div>
  </div>

  <!-- Search Statistics -->
  <div class="search-stats">
    <div class="stat-item">
      <span class="stat-number" id="totalTermsCount">30</span>
      <span class="stat-label">Total Terms</span>
    </div>
    <div class="stat-item">
      <span class="stat-number" id="categoriesCount">6</span>
      <span class="stat-label">Categories</span>
    </div>
    <div class="stat-item">
      <span class="stat-number" id="lastSearchTime">0ms</span>
      <span class="stat-label">Search Time</span>
    </div>
  </div>
</div>

<style>
  @import url('https://fonts.googleapis.com/css2?family=Crimson+Text:ital,wght@0,400;0,600;1,400&family=Source+Serif+Pro:wght@400;600&display=swap');

  .enhanced-search-container {
    width: 100%;
    max-width: 900px;
    margin: 0 auto 40px auto;
    font-family: 'Source Serif Pro', serif;
  }

  /* Search Header */
  .search-header {
    text-align: center;
    margin-bottom: 30px;
    padding: 30px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 16px;
    color: white;
    box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
  }

  .search-title {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 12px;
    font-family: 'Crimson Text', serif;
    font-size: 2.5rem;
    font-weight: 600;
    margin: 0 0 12px 0;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
  }

  .search-icon {
    width: 40px;
    height: 40px;
  }

  .search-subtitle {
    font-size: 1.1rem;
    opacity: 0.9;
    margin: 0;
    font-weight: 400;
  }

  /* Main Search Input */
  .search-input-container {
    position: relative;
    margin-bottom: 30px;
  }

  .search-input-wrapper {
    position: relative;
    display: flex;
    align-items: center;
    background: white;
    border: 3px solid #e2e8f0;
    border-radius: 16px;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    overflow: hidden;
  }

  .search-input-wrapper:focus-within {
    border-color: #667eea;
    box-shadow: 0 8px 25px rgba(102, 126, 234, 0.2), 0 0 0 4px rgba(102, 126, 234, 0.1);
    transform: translateY(-2px);
  }

  .search-input-icon {
    padding: 0 20px;
    color: #64748b;
  }

  .search-input {
    flex: 1;
    padding: 20px 0;
    border: none;
    outline: none;
    font-size: 1.2rem;
    font-family: 'Source Serif Pro', serif;
    color: #334155;
    background: transparent;
  }

  .search-input::placeholder {
    color: #94a3b8;
    font-style: italic;
  }

  .clear-btn {
    padding: 12px 20px;
    background: none;
    border: none;
    color: #64748b;
    cursor: pointer;
    transition: all 0.3s ease;
    border-radius: 8px;
    margin-right: 8px;
  }

  .clear-btn:hover {
    background: #f1f5f9;
    color: #475569;
  }

  .icon {
    width: 20px;
    height: 20px;
  }

  /* Search Suggestions */
  .search-suggestions {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: white;
    border: 1px solid #e2e8f0;
    border-radius: 12px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
    z-index: 1000;
    margin-top: 8px;
    overflow: hidden;
  }

  .suggestions-header {
    padding: 12px 20px;
    background: #f8fafc;
    border-bottom: 1px solid #e2e8f0;
  }

  .suggestions-title {
    font-size: 0.9rem;
    font-weight: 600;
    color: #475569;
  }

  .suggestions-list {
    max-height: 200px;
    overflow-y: auto;
  }

  .suggestion-item {
    padding: 12px 20px;
    cursor: pointer;
    transition: background-color 0.2s ease;
    border-bottom: 1px solid #f1f5f9;
  }

  .suggestion-item:hover {
    background: #f8fafc;
  }

  .suggestion-item:last-child {
    border-bottom: none;
  }

  /* Filter Section */
  .filter-section {
    display: flex;
    flex-direction: column;
    gap: 20px;
    padding: 25px;
    background: white;
    border-radius: 16px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    border: 1px solid #e2e8f0;
    margin-bottom: 30px;
  }

  .filter-group {
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  .filter-label {
    font-weight: 600;
    color: #334155;
    font-size: 1rem;
  }

  .filter-buttons {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
  }

  .filter-btn {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 10px 16px;
    background: #f8fafc;
    border: 2px solid #e2e8f0;
    border-radius: 25px;
    color: #475569;
    font-size: 0.9rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    white-space: nowrap;
  }

  .filter-btn:hover {
    background: #f1f5f9;
    border-color: #cbd5e1;
    transform: translateY(-1px);
  }

  .filter-btn-active {
    background: #667eea;
    border-color: #667eea;
    color: white;
    box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
  }

  .filter-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
  }

  .all-dot { background: #6b7280; }
  .basic-dot { background: #10b981; }
  .intermediate-dot { background: #f59e0b; }
  .advanced-dot { background: #ef4444; }

  /* Search Results */
  .search-results {
    background: white;
    border-radius: 16px;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
    border: 1px solid #e2e8f0;
    margin-bottom: 30px;
    overflow: hidden;
  }

  .results-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px 25px;
    background: #f8fafc;
    border-bottom: 1px solid #e2e8f0;
  }

  .results-count {
    font-weight: 600;
    color: #334155;
  }

  .close-results-btn {
    background: none;
    border: none;
    color: #64748b;
    cursor: pointer;
    padding: 8px;
    border-radius: 6px;
    transition: all 0.2s ease;
  }

  .close-results-btn:hover {
    background: #e2e8f0;
    color: #475569;
  }

  .results-list {
    max-height: 400px;
    overflow-y: auto;
  }

  .result-item {
    padding: 20px 25px;
    border-bottom: 1px solid #f1f5f9;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }

  .result-item:hover {
    background: #f8fafc;
  }

  .result-item:last-child {
    border-bottom: none;
  }

  .result-term {
    font-size: 1.2rem;
    font-weight: 600;
    color: #1e293b;
    margin-bottom: 8px;
    font-family: 'Crimson Text', serif;
  }

  .result-definition {
    color: #475569;
    line-height: 1.5;
    margin-bottom: 8px;
  }

  .result-meta {
    display: flex;
    gap: 16px;
    font-size: 0.85rem;
    color: #64748b;
  }

  .result-category {
    text-transform: capitalize;
  }

  .result-difficulty {
    padding: 2px 8px;
    border-radius: 12px;
    font-weight: 500;
  }

  .difficulty-basic { background: #dcfce7; color: #166534; }
  .difficulty-intermediate { background: #fef3c7; color: #92400e; }
  .difficulty-advanced { background: #fecaca; color: #991b1b; }

  /* No Results */
  .no-results {
    padding: 60px 25px;
    text-align: center;
    color: #64748b;
  }

  .no-results-icon {
    margin: 0 auto 20px auto;
    width: 64px;
    height: 64px;
    color: #cbd5e1;
  }

  .no-results h3 {
    font-size: 1.5rem;
    color: #334155;
    margin: 0 0 12px 0;
  }

  .no-results p {
    font-size: 1rem;
    margin: 0 0 24px 0;
  }

  .search-tips {
    text-align: left;
    background: #f8fafc;
    padding: 20px;
    border-radius: 12px;
    margin-top: 24px;
  }

  .search-tips strong {
    color: #334155;
  }

  .search-tips ul {
    margin: 8px 0 0 0;
    padding-left: 20px;
  }

  .search-tips li {
    margin-bottom: 4px;
  }

  /* Search Statistics */
  .search-stats {
    display: flex;
    justify-content: center;
    gap: 40px;
    padding: 20px;
    background: white;
    border-radius: 12px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    border: 1px solid #f1f5f9;
  }

  .stat-item {
    text-align: center;
  }

  .stat-number {
    display: block;
    font-size: 2rem;
    font-weight: bold;
    color: #667eea;
    font-family: 'Crimson Text', serif;
  }

  .stat-label {
    font-size: 0.9rem;
    color: #64748b;
    font-weight: 500;
  }

  .hidden {
    display: none;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .search-title {
      font-size: 2rem;
      flex-direction: column;
      gap: 8px;
    }

    .search-icon {
      width: 32px;
      height: 32px;
    }

    .filter-section {
      padding: 20px;
    }

    .filter-group {
      gap: 8px;
    }

    .filter-buttons {
      gap: 8px;
    }

    .filter-btn {
      padding: 8px 12px;
      font-size: 0.85rem;
    }

    .search-stats {
      flex-direction: column;
      gap: 16px;
    }

    .stat-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .stat-number {
      font-size: 1.5rem;
    }
  }

  @media (max-width: 480px) {
    .search-header {
      padding: 20px;
    }

    .search-title {
      font-size: 1.8rem;
    }

    .search-input {
      font-size: 1rem;
      padding: 16px 0;
    }

    .search-input-icon,
    .clear-btn {
      padding: 0 16px;
    }

    .filter-buttons {
      flex-direction: column;
    }

    .filter-btn {
      justify-content: center;
    }
  }
</style>

<script>
  function setupEnhancedSearch() {
    const searchInput = document.getElementById('enhancedSearchInput') as HTMLInputElement;
    const clearBtn = document.getElementById('clearEnhancedSearch');
    const suggestions = document.getElementById('searchSuggestions');
    const suggestionsList = document.getElementById('suggestionsList');
    const searchResults = document.getElementById('searchResults');
    const resultsList = document.getElementById('resultsList');
    const resultsCount = document.getElementById('resultsCount');
    const noResults = document.getElementById('noResults');
    const closeResults = document.getElementById('closeResults');
    const lastSearchTime = document.getElementById('lastSearchTime');
    
    let currentDifficulty = 'all';
    let currentSearchType = 'all';
    let searchTimeout;
    
    // Sample suggestions
    const popularTerms = [
      'hypertension', 'pneumonia', 'myocardial infarction', 'asthma', 'stroke',
      'arthritis', 'diabetes', 'melanoma', 'fracture', 'gastritis'
    ];
    
    // Filter button handlers
    document.querySelectorAll('.filter-btn[data-difficulty]').forEach(btn => {
      btn.addEventListener('click', () => {
        document.querySelectorAll('.filter-btn[data-difficulty]').forEach(b => 
          b.classList.remove('filter-btn-active'));
        btn.classList.add('filter-btn-active');
        currentDifficulty = btn.getAttribute('data-difficulty') || 'all';
        if (searchInput.value.trim()) {
          performSearch();
        }
      });
    });
    
    document.querySelectorAll('.filter-btn[data-search-type]').forEach(btn => {
      btn.addEventListener('click', () => {
        document.querySelectorAll('.filter-btn[data-search-type]').forEach(b => 
          b.classList.remove('filter-btn-active'));
        btn.classList.add('filter-btn-active');
        currentSearchType = btn.getAttribute('data-search-type') || 'all';
        if (searchInput.value.trim()) {
          performSearch();
        }
      });
    });
    
    // Search input handlers
    searchInput.addEventListener('input', () => {
      const value = searchInput.value.trim();
      clearBtn.classList.toggle('hidden', !value);
      
      clearTimeout(searchTimeout);
      
      if (value.length > 0) {
        showSuggestions();
        searchTimeout = window.setTimeout(performSearch, 300);
      } else {
        hideSuggestions();
        hideResults();
      }
    });
    
    searchInput.addEventListener('focus', () => {
      if (searchInput.value.length > 0) {
        showSuggestions();
      }
    });
    
    // Clear button
    clearBtn?.addEventListener('click', () => {
      searchInput.value = '';
      clearBtn.classList.add('hidden');
      hideSuggestions();
      hideResults();
      searchInput.focus();
    });
    
    // Close results
    closeResults?.addEventListener('click', hideResults);
    
    // Hide suggestions when clicking outside
    document.addEventListener('click', (e) => {
      if (!e.target || !(e.target as Element).closest('.search-input-container')) {
        hideSuggestions();
      }
    });
    
    function showSuggestions() {
      if (suggestionsList && suggestions) {
        suggestionsList.innerHTML = popularTerms
          .filter(term => term.toLowerCase().includes(searchInput.value.toLowerCase()))
          .slice(0, 5)
          .map(term => `
            <div class="suggestion-item" onclick="selectSuggestion('${term}')">
              ${highlightMatch(term, searchInput.value)}
            </div>
          `).join('');
        
        suggestions.classList.remove('hidden');
      }
    }
    
    function hideSuggestions() {
      suggestions?.classList.add('hidden');
    }
    
    function hideResults() {
      searchResults?.classList.add('hidden');
    }
    
    function highlightMatch(text: string, query: string) {
      if (!query) return text;
      const regex = new RegExp(`(${query})`, 'gi');
      return text.replace(regex, '<mark style="background: #fef3c7; padding: 2px 4px; border-radius: 4px;">$1</mark>');
    }
    
    function performSearch() {
      const startTime = performance.now();
      const query = searchInput.value.trim().toLowerCase();
      
      // Simulate search - in real app, this would call an API
      setTimeout(() => {
        const endTime = performance.now();
        const searchTime = Math.round(endTime - startTime);
        
        if (lastSearchTime) {
          lastSearchTime.textContent = `${searchTime}ms`;
        }
        
        // Mock results - replace with actual search logic
        const mockResults = [
          {
            term: 'Hypertension',
            definition: 'High blood pressure, defined as systolic pressure ≥140 mmHg or diastolic pressure ≥90 mmHg',
            category: 'cardiovascular',
            difficulty: 'basic'
          },
          {
            term: 'Myocardial Infarction', 
            definition: 'Death of heart muscle tissue due to lack of blood supply, commonly known as a heart attack',
            category: 'cardiovascular',
            difficulty: 'intermediate'
          }
        ].filter(result => {
          const matchesQuery = result.term.toLowerCase().includes(query) || 
                              result.definition.toLowerCase().includes(query);
          const matchesDifficulty = currentDifficulty === 'all' || result.difficulty === currentDifficulty;
          return matchesQuery && matchesDifficulty;
        });
        
        displayResults(mockResults);
        hideSuggestions();
      }, 100);
    }
    
    function displayResults(results: any[]) {
      if (!searchResults || !resultsList || !resultsCount || !noResults) return;
      
      resultsCount.textContent = `${results.length} result${results.length !== 1 ? 's' : ''} found`;
      
      if (results.length === 0) {
        resultsList.innerHTML = '';
        noResults.classList.remove('hidden');
      } else {
        noResults.classList.add('hidden');
        resultsList.innerHTML = results.map(result => `
          <div class="result-item" onclick="selectResult('${result.term}')">
            <div class="result-term">${highlightMatch(result.term, searchInput.value)}</div>
            <div class="result-definition">${highlightMatch(result.definition, searchInput.value)}</div>
            <div class="result-meta">
              <span class="result-category">📚 ${result.category}</span>
              <span class="result-difficulty difficulty-${result.difficulty}">${result.difficulty}</span>
            </div>
          </div>
        `).join('');
      }
      
      searchResults.classList.remove('hidden');
    }
    
    // Global functions
    (window as any).selectSuggestion = function(term: string) {
      searchInput.value = term;
      hideSuggestions();
      performSearch();
    };
    
    (window as any).selectResult = function(term: string) {
      // Navigate to the term or highlight it
      console.log('Selected result:', term);
      hideResults();
    };
    
    // Keyboard shortcuts
    document.addEventListener('keydown', (e) => {
      if (e.key === '/' && e.target !== searchInput) {
        e.preventDefault();
        searchInput.focus();
      }
      
      if (e.key === 'Escape') {
        hideSuggestions();
        hideResults();
        searchInput.blur();
      }
    });
  }
  
  document.addEventListener('DOMContentLoaded', setupEnhancedSearch);
</script>