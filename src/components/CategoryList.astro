---
import categories from '../data/categories.json';

const colorClasses = {
  red: 'bg-red-100 text-red-800 hover:bg-red-200',
  blue: 'bg-blue-100 text-blue-800 hover:bg-blue-200', 
  purple: 'bg-purple-100 text-purple-800 hover:bg-purple-200',
  pink: 'bg-pink-100 text-pink-800 hover:bg-pink-200',
  yellow: 'bg-yellow-100 text-yellow-800 hover:bg-yellow-200',
  green: 'bg-green-100 text-green-800 hover:bg-green-200'
};
---

<div class="category-list bg-white rounded-xl shadow-lg border border-gray-200 p-6">
  <h2 class="text-xl font-bold text-gray-800 mb-6 flex items-center">
    <svg class="w-6 h-6 mr-2 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
    </svg>
    Medical Categories
  </h2>
  
  <div class="space-y-3">
    <a 
      href="/" 
      class="category-item flex items-center p-3 rounded-lg bg-gray-100 text-gray-800 hover:bg-gray-200 transition-colors group"
    >
      <span class="text-2xl mr-3">üìö</span>
      <div class="flex-1">
        <h3 class="font-semibold">All Categories</h3>
        <p class="text-sm text-gray-600">Study all medical terms together</p>
      </div>
      <svg class="w-5 h-5 text-gray-400 group-hover:text-gray-600 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
      </svg>
    </a>
    
    {Object.entries(categories).map(([key, category]) => (
      <a 
        href={`/${key}`}
        class={`category-item flex items-center p-3 rounded-lg transition-colors group ${colorClasses[category.color]}`}
      >
        <span class="text-2xl mr-3">{category.icon}</span>
        <div class="flex-1">
          <h3 class="font-semibold">{category.name}</h3>
          <p class="text-sm opacity-75">{category.description}</p>
        </div>
        <svg class="w-5 h-5 opacity-60 group-hover:opacity-80 transition-opacity" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
      </a>
    ))}
  </div>
  
  <div class="mt-6 pt-4 border-t border-gray-200">
    <div class="flex items-center justify-between text-sm text-gray-600 mb-3">
      <span>Quick Actions:</span>
    </div>
    
    <div class="space-y-2">
      <button 
        id="shuffleAll"
        class="w-full flex items-center justify-center px-4 py-2 bg-blue-100 hover:bg-blue-200 text-blue-700 rounded-lg transition-colors text-sm font-medium"
      >
        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
        </svg>
        Shuffle Current Cards
      </button>
      
      <button 
        id="studyMode"
        class="w-full flex items-center justify-center px-4 py-2 bg-green-100 hover:bg-green-200 text-green-700 rounded-lg transition-colors text-sm font-medium"
      >
        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
        </svg>
        Focus Mode
      </button>
    </div>
  </div>
  
  <!-- Keyboard Shortcuts -->
  <div class="mt-6 pt-4 border-t border-gray-200">
    <h3 class="text-sm font-semibold text-gray-700 mb-3">Keyboard Shortcuts</h3>
    <div class="space-y-2 text-xs text-gray-600">
      <div class="flex justify-between">
        <span>‚Üê / ‚Üí</span>
        <span>Previous / Next card</span>
      </div>
      <div class="flex justify-between">
        <span>Space / Enter</span>
        <span>Flip card</span>
      </div>
      <div class="flex justify-between">
        <span>S</span>
        <span>Shuffle cards</span>
      </div>
      <div class="flex justify-between">
        <span>/</span>
        <span>Focus search</span>
      </div>
    </div>
  </div>
</div>

<script>
  function setupCategoryList() {
    const shuffleButton = document.getElementById('shuffleAll');
    const studyModeButton = document.getElementById('studyMode');
    
    shuffleButton?.addEventListener('click', () => {
      const flashcards = Array.from(document.querySelectorAll('.flashcard-container'));
      const container = flashcards[0]?.parentElement;
      
      if (container && flashcards.length > 0) {
        // Shuffle array
        for (let i = flashcards.length - 1; i > 0; i--) {
          const j = Math.floor(Math.random() * (i + 1));
          [flashcards[i], flashcards[j]] = [flashcards[j], flashcards[i]];
        }
        
        // Re-append in new order
        flashcards.forEach(card => container.appendChild(card));
        
        // Show feedback
        shuffleButton.textContent = '‚úì Shuffled!';
        setTimeout(() => {
          shuffleButton.innerHTML = `
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
            </svg>
            Shuffle Current Cards
          `;
        }, 1500);
      }
    });
    
    studyModeButton?.addEventListener('click', () => {
      const categoryList = document.querySelector('.category-list') as HTMLElement;
      const searchBar = document.querySelector('.search-container') as HTMLElement;
      const progressTracker = document.querySelector('.progress-tracker') as HTMLElement;
      
      const isHidden = categoryList.style.display === 'none';
      
      if (isHidden) {
        // Exit focus mode
        categoryList.style.display = 'block';
        searchBar.style.display = 'block';
        progressTracker.style.display = 'block';
        studyModeButton.textContent = 'üéØ Focus Mode';
        studyModeButton.className = studyModeButton.className.replace('bg-red-100 hover:bg-red-200 text-red-700', 'bg-green-100 hover:bg-green-200 text-green-700');
      } else {
        // Enter focus mode
        categoryList.style.display = 'none';
        searchBar.style.display = 'none';
        progressTracker.style.display = 'none';
        studyModeButton.style.display = 'block'; // Keep button visible
        studyModeButton.textContent = '‚Üê Exit Focus';
        studyModeButton.className = studyModeButton.className.replace('bg-green-100 hover:bg-green-200 text-green-700', 'bg-red-100 hover:bg-red-200 text-red-700');
      }
    });
  }
  
  document.addEventListener('DOMContentLoaded', setupCategoryList);
</script>