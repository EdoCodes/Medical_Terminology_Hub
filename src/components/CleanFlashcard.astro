---
interface Props {
  term: string;
  definition: string;
  example?: string;
  difficulty: 'basic' | 'intermediate' | 'advanced';
  id: string;
}

const { term, definition, example, difficulty, id } = Astro.props;
---

<div class="clean-flashcard" data-term-id={id}>
  <div class="flashcard-inner">
    <!-- Front of Card -->
    <div class="flashcard-front active">
      <div class="flashcard-header">
        <span class={`difficulty-badge ${difficulty}`}>
          {difficulty.toUpperCase()}
        </span>
      </div>
      
      <div class="flashcard-content">
        <h2 class="term-text">{term}</h2>
        <div class="reveal-prompt">
          <span>Click to reveal definition</span>
        </div>
      </div>
    </div>

    <!-- Back of Card -->
    <div class="flashcard-back">
      <div class="flashcard-header">
        <button class="back-btn">
          Back to Term
        </button>
      </div>
      
      <div class="flashcard-content">
        <h3 class="definition-label">Definition</h3>
        <p class="definition-text">{definition}</p>
        
        {example && (
          <div class="example-section">
            <h4 class="example-label">Clinical Example</h4>
            <p class="example-text">{example}</p>
          </div>
        )}
        
        <div class="study-actions">
          <button class="study-btn correct" data-action="correct">
            Got It!
          </button>
          <button class="study-btn review" data-action="review">
            Review Again
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .clean-flashcard {
    width: 100%;
    max-width: 420px;
    height: 300px;
    margin: 0 auto;
    perspective: 1200px;
    cursor: pointer;
  }

  .flashcard-inner {
    position: relative;
    width: 100%;
    height: 100%;
    transition: transform 0.8s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    transform-style: preserve-3d;
  }

  .flashcard-inner.flipped {
    transform: rotateY(180deg);
  }

  .flashcard-front,
  .flashcard-back {
    position: absolute;
    width: 100%;
    height: 100%;
    backface-visibility: hidden;
    border-radius: 16px;
    background: #ffffff;
    border: 1px solid #d1d5db;
    display: flex;
    flex-direction: column;
    
    /* Sophisticated shadow that makes card appear to protrude */
    box-shadow: 
      0 2px 4px rgba(0, 0, 0, 0.04),
      0 8px 16px rgba(0, 0, 0, 0.06),
      0 16px 24px rgba(0, 0, 0, 0.08),
      0 24px 32px rgba(0, 0, 0, 0.06);
    
    /* Subtle border to enhance the 3D effect */
    border: 1px solid rgba(0, 0, 0, 0.08);
  }

  .flashcard-back {
    transform: rotateY(180deg);
    cursor: default;
  }

  .flashcard-header {
    padding: 20px 24px 0 24px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    min-height: 48px;
  }

  .difficulty-badge {
    font-size: 11px;
    font-weight: 700;
    letter-spacing: 1px;
    padding: 6px 12px;
    border-radius: 20px;
    color: #ffffff;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .difficulty-badge.basic {
    background: linear-gradient(135deg, #059669 0%, #10b981 100%);
  }

  .difficulty-badge.intermediate {
    background: linear-gradient(135deg, #d97706 0%, #f59e0b 100%);
  }

  .difficulty-badge.advanced {
    background: linear-gradient(135deg, #dc2626 0%, #ef4444 100%);
  }

  .back-btn {
    background: none;
    border: 1px solid #e5e7eb;
    color: #374151;
    font-size: 13px;
    font-weight: 600;
    cursor: pointer;
    padding: 8px 16px;
    border-radius: 8px;
    transition: all 0.3s ease;
    font-family: inherit;
  }

  .back-btn:hover {
    background: #f9fafb;
    border-color: #d1d5db;
    color: #111827;
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  }

  .flashcard-content {
    flex: 1;
    padding: 24px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
  }

  /* Front Content */
  .term-text {
    font-size: 32px;
    font-weight: 700;
    color: #111827;
    margin: 0 0 32px 0;
    line-height: 1.1;
    letter-spacing: -0.02em;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
  }

  .reveal-prompt {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 8px;
    color: #6b7280;
    font-size: 15px;
    font-weight: 500;
    letter-spacing: 0.3px;
  }

  /* Back Content */
  .flashcard-back .flashcard-content {
    text-align: left;
    justify-content: flex-start;
    padding: 20px 24px 24px 24px;
  }

  .definition-label {
    font-size: 15px;
    font-weight: 700;
    color: #374151;
    margin: 0 0 12px 0;
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .definition-text {
    font-size: 17px;
    line-height: 1.6;
    color: #111827;
    margin: 0 0 24px 0;
    font-weight: 400;
  }

  .example-section {
    margin-bottom: 28px;
  }

  .example-label {
    font-size: 13px;
    font-weight: 700;
    color: #6b7280;
    margin: 0 0 8px 0;
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .example-text {
    font-size: 15px;
    line-height: 1.5;
    color: #374151;
    margin: 0;
    font-style: italic;
    font-weight: 400;
  }

  .study-actions {
    display: flex;
    gap: 16px;
    margin-top: auto;
  }

  .study-btn {
    flex: 1;
    padding: 14px 20px;
    border: 1px solid transparent;
    border-radius: 10px;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    font-family: inherit;
    letter-spacing: 0.3px;
  }

  .study-btn.correct {
    background: linear-gradient(135deg, #dcfce7 0%, #bbf7d0 100%);
    color: #166534;
    border-color: #a7f3d0;
  }

  .study-btn.correct:hover {
    background: linear-gradient(135deg, #bbf7d0 0%, #a7f3d0 100%);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(34, 197, 94, 0.2);
  }

  .study-btn.review {
    background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
    color: #92400e;
    border-color: #fed7aa;
  }

  .study-btn.review:hover {
    background: linear-gradient(135deg, #fde68a 0%, #fed7aa 100%);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(245, 158, 11, 0.2);
  }

  /* Hover Effects */
  .clean-flashcard:hover .flashcard-front {
    transform: translateY(-4px);
    box-shadow: 
      0 4px 8px rgba(0, 0, 0, 0.06),
      0 12px 24px rgba(0, 0, 0, 0.08),
      0 20px 32px rgba(0, 0, 0, 0.10),
      0 28px 40px rgba(0, 0, 0, 0.08);
  }

  .clean-flashcard:hover .flashcard-back {
    transform: rotateY(180deg) translateZ(4px);
    box-shadow: 
      0 4px 8px rgba(0, 0, 0, 0.06),
      0 12px 24px rgba(0, 0, 0, 0.08),
      0 20px 32px rgba(0, 0, 0, 0.10),
      0 28px 40px rgba(0, 0, 0, 0.08);
  }

  /* Responsive Design */
  @media (max-width: 480px) {
    .clean-flashcard {
      max-width: 380px;
      height: 280px;
    }

    .term-text {
      font-size: 28px;
    }

    .flashcard-content {
      padding: 20px;
    }

    .flashcard-back .flashcard-content {
      padding: 16px 20px 20px 20px;
    }

    .study-actions {
      flex-direction: column;
      gap: 12px;
    }

    .study-btn {
      padding: 12px 16px;
    }
  }
</style>

<script>
  function initializeCleanFlashcard() {
    const flashcards = document.querySelectorAll('.clean-flashcard');
    
    flashcards.forEach(flashcard => {
      const inner = flashcard.querySelector('.flashcard-inner');
      const backBtn = flashcard.querySelector('.back-btn');
      const studyButtons = flashcard.querySelectorAll('.study-btn');
      
      if (!inner) return;

      // Click to flip to back
      flashcard.addEventListener('click', (e) => {
        if (e.target.closest('.flashcard-back')) return;
        
        inner.classList.add('flipped');
        flashcard.style.cursor = 'default';
      });

      // Back button
      if (backBtn) {
        backBtn.addEventListener('click', (e) => {
          e.stopPropagation();
          inner.classList.remove('flipped');
          flashcard.style.cursor = 'pointer';
        });
      }

      // Study action buttons
      studyButtons.forEach(button => {
        button.addEventListener('click', (e) => {
          e.stopPropagation();
          const action = button.getAttribute('data-action');
          const termId = flashcard.getAttribute('data-term-id');
          
          // Update study statistics
          updateStudyStats(action, termId);
          
          // Visual feedback
          button.style.transform = 'scale(0.96)';
          setTimeout(() => {
            button.style.transform = 'scale(1)';
          }, 200);

          // Move to next card (if in study session)
          setTimeout(() => {
            if (window.nextCard && typeof window.nextCard === 'function') {
              window.nextCard();
            }
          }, 500);
        });
      });
    });
  }

  function updateStudyStats(action, termId) {
    const stats = JSON.parse(localStorage.getItem('medicalTermsStats') || '{"studied": 0, "correct": 0, "review": 0}');
    
    stats.studied = (stats.studied || 0) + 1;
    
    if (action === 'correct') {
      stats.correct = (stats.correct || 0) + 1;
    } else if (action === 'review') {
      stats.review = (stats.review || 0) + 1;
    }
    
    localStorage.setItem('medicalTermsStats', JSON.stringify(stats));
    
    // Update header stats
    if (window.updateStudyStats && typeof window.updateStudyStats === 'function') {
      window.updateStudyStats();
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', initializeCleanFlashcard);
  
  // Re-initialize when new content is loaded
  document.addEventListener('flashcardsLoaded', initializeCleanFlashcard);
</script>