---
export interface Props {
  term: string;
  definition: string;
  example: string;
  difficulty: 'basic' | 'intermediate' | 'advanced';
  id: string;
}

const { term, definition, example, difficulty, id } = Astro.props;

const difficultyColors = {
  basic: 'bg-green-100 text-green-800',
  intermediate: 'bg-yellow-100 text-yellow-800', 
  advanced: 'bg-red-100 text-red-800'
};
---

<div class="flashcard-container perspective-1000" data-card-id={id}>
  <div class="flashcard relative w-full h-80 transition-transform duration-700 transform-style-preserve-3d cursor-pointer">
    <!-- Front of card -->
    <div class="flashcard-face flashcard-front absolute inset-0 w-full h-full backface-hidden bg-white rounded-xl shadow-lg border border-gray-200 flex flex-col justify-center items-center p-6">
      <div class="flex items-center justify-between w-full mb-4">
        <span class={`px-3 py-1 rounded-full text-xs font-medium ${difficultyColors[difficulty]}`}>
          {difficulty.charAt(0).toUpperCase() + difficulty.slice(1)}
        </span>
        <button class="text-gray-400 hover:text-gray-600 transition-colors" title="Flip card">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
          </svg>
        </button>
      </div>
      
      <div class="text-center">
        <h3 class="text-2xl font-bold text-gray-800 mb-4">{term}</h3>
        <p class="text-gray-500 text-sm">Click to see definition</p>
      </div>
      
      <div class="mt-auto flex space-x-2">
        <button class="px-4 py-2 bg-red-500 hover:bg-red-600 text-white rounded-lg transition-colors" onclick="markIncorrect(this)">
          ❌ Incorrect
        </button>
        <button class="px-4 py-2 bg-green-500 hover:bg-green-600 text-white rounded-lg transition-colors" onclick="markCorrect(this)">
          ✅ Correct
        </button>
      </div>
    </div>
    
    <!-- Back of card -->
    <div class="flashcard-face flashcard-back absolute inset-0 w-full h-full backface-hidden bg-gradient-to-br from-blue-50 to-indigo-100 rounded-xl shadow-lg border border-gray-200 p-6 transform rotate-y-180">
      <div class="flex items-center justify-between w-full mb-4">
        <span class={`px-3 py-1 rounded-full text-xs font-medium ${difficultyColors[difficulty]}`}>
          {difficulty.charAt(0).toUpperCase() + difficulty.slice(1)}
        </span>
        <button class="text-gray-400 hover:text-gray-600 transition-colors" title="Flip card">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
          </svg>
        </button>
      </div>
      
      <div class="h-full flex flex-col">
        <h3 class="text-xl font-bold text-gray-800 mb-4">{term}</h3>
        
        <div class="flex-1">
          <h4 class="text-sm font-semibold text-gray-600 mb-2">Definition:</h4>
          <p class="text-gray-700 mb-4 leading-relaxed">{definition}</p>
          
          <h4 class="text-sm font-semibold text-gray-600 mb-2">Clinical Example:</h4>
          <p class="text-gray-600 text-sm italic leading-relaxed">{example}</p>
        </div>
        
        <div class="mt-4 flex space-x-2">
          <button class="px-4 py-2 bg-red-500 hover:bg-red-600 text-white rounded-lg transition-colors" onclick="markIncorrect(this)">
            ❌ Incorrect
          </button>
          <button class="px-4 py-2 bg-green-500 hover:bg-green-600 text-white rounded-lg transition-colors" onclick="markCorrect(this)">
            ✅ Correct
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  function setupFlashcard() {
    const containers = document.querySelectorAll('.flashcard-container');
    
    containers.forEach(container => {
      const flashcard = container.querySelector('.flashcard');
      let isFlipped = false;
      
      container.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        if (target.closest('button') && !target.closest('[title="Flip card"]')) {
          return;
        }
        
        isFlipped = !isFlipped;
        (flashcard as HTMLElement).style.transform = isFlipped ? 'rotateY(180deg)' : 'rotateY(0deg)';
        (window as any).medicalTermsApp.isFlipped = isFlipped;
      });
    });
  }
  
  function markCorrect(button: any) {
    (window as any).medicalTermsApp.studyStats.studied++;
    (window as any).medicalTermsApp.studyStats.correct++;
    (window as any).medicalTermsApp.saveStats();
    
    button.classList.add('animate-pulse');
    setTimeout(() => button.classList.remove('animate-pulse'), 500);
  }
  
  function markIncorrect(button: any) {
    (window as any).medicalTermsApp.studyStats.studied++;
    (window as any).medicalTermsApp.saveStats();
    
    button.classList.add('animate-pulse');
    setTimeout(() => button.classList.remove('animate-pulse'), 500);
  }
  
  document.addEventListener('DOMContentLoaded', setupFlashcard);
</script>

<style>
  .perspective-1000 {
    perspective: 1000px;
  }
  
  .transform-style-preserve-3d {
    transform-style: preserve-3d;
  }
  
  .backface-hidden {
    backface-visibility: hidden;
  }
  
  .rotate-y-180 {
    transform: rotateY(180deg);
  }
</style>