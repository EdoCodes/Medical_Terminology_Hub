---
export interface Props {
  terms: any[];
  category?: string;
}

const { terms, category = "all" } = Astro.props;
---

<div class="flashcard-carousel-container">
  <!-- Navigation Header -->
  <div class="carousel-header">
    <div class="carousel-controls">
      <button id="prevCard" class="nav-btn nav-btn-prev" title="Previous card (←)">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
        </svg>
      </button>
      
      <div class="carousel-info">
        <span id="currentCardNumber" class="card-number">1</span>
        <span class="card-separator">of</span>
        <span id="totalCards" class="card-total">{terms.length}</span>
      </div>
      
      <button id="nextCard" class="nav-btn nav-btn-next" title="Next card (→)">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
        </svg>
      </button>
    </div>
    
    <div class="carousel-actions">
      <button id="shuffleCards" class="action-btn shuffle-btn" title="Shuffle cards (S)">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
        </svg>
        <span>Shuffle</span>
      </button>
      
      <button id="autoPlay" class="action-btn autoplay-btn" title="Auto-advance cards">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h8m2-10v18a2 2 0 01-2 2H5a2 2 0 01-2-2V4a2 2 0 012-2h14a2 2 0 012 2z"/>
        </svg>
        <span id="autoPlayText">Auto Study</span>
      </button>
    </div>
  </div>

  <!-- Progress Bar -->
  <div class="progress-container">
    <div class="progress-bar">
      <div id="progressFill" class="progress-fill" style="width: 0%"></div>
    </div>
    <div class="progress-text">
      <span id="progressPercent">0%</span> completed
    </div>
  </div>

  <!-- Flashcard Display Area -->
  <div class="carousel-display">
    <div id="flashcardContainer" class="flashcard-container">
      <!-- Cards will be dynamically inserted here -->
    </div>
    
    <!-- Loading indicator -->
    <div id="loadingIndicator" class="loading-indicator hidden">
      <div class="loading-spinner"></div>
      <p>Loading flashcards...</p>
    </div>
  </div>

  <!-- Study Session Stats -->
  <div class="session-stats">
    <div class="stat-item">
      <span class="stat-label">Cards Studied:</span>
      <span id="cardsStudied" class="stat-value">0</span>
    </div>
    <div class="stat-item">
      <span class="stat-label">Correct:</span>
      <span id="correctAnswers" class="stat-value">0</span>
    </div>
    <div class="stat-item">
      <span class="stat-label">Accuracy:</span>
      <span id="accuracyRate" class="stat-value">0%</span>
    </div>
  </div>
</div>

<style>
  @import url('https://fonts.googleapis.com/css2?family=Crimson+Text:ital,wght@0,400;0,600;1,400&family=Source+Serif+Pro:wght@400;600&display=swap');

  .flashcard-carousel-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
    font-family: 'Source Serif Pro', serif;
  }

  /* Navigation Header */
  .carousel-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    padding: 20px;
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    border-radius: 12px;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  }

  .carousel-controls {
    display: flex;
    align-items: center;
    gap: 20px;
  }

  .nav-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 50px;
    height: 50px;
    background: white;
    border: 2px solid #dee2e6;
    border-radius: 50%;
    color: #495057;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .nav-btn:hover:not(:disabled) {
    background: #007bff;
    border-color: #007bff;
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 123, 255, 0.3);
  }

  .nav-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
  }

  .carousel-info {
    display: flex;
    align-items: center;
    gap: 8px;
    font-family: 'Crimson Text', serif;
    font-size: 1.5rem;
    font-weight: 600;
    color: #495057;
    min-width: 120px;
    justify-content: center;
  }

  .card-number {
    color: #007bff;
  }

  .card-separator {
    color: #6c757d;
    font-size: 1.2rem;
  }

  .carousel-actions {
    display: flex;
    gap: 12px;
  }

  .action-btn {
    display: flex;
    align-items: center;
    gap: 6px;
    padding: 10px 16px;
    background: white;
    border: 2px solid #dee2e6;
    border-radius: 8px;
    color: #495057;
    font-size: 0.9rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .shuffle-btn:hover {
    background: #28a745;
    border-color: #28a745;
    color: white;
    transform: translateY(-1px);
  }

  .autoplay-btn:hover {
    background: #fd7e14;
    border-color: #fd7e14;
    color: white;
    transform: translateY(-1px);
  }

  .autoplay-btn.active {
    background: #fd7e14;
    border-color: #fd7e14;
    color: white;
  }

  /* Progress Bar */
  .progress-container {
    margin-bottom: 30px;
  }

  .progress-bar {
    width: 100%;
    height: 8px;
    background: #e9ecef;
    border-radius: 4px;
    overflow: hidden;
    margin-bottom: 8px;
  }

  .progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #007bff, #0056b3);
    border-radius: 4px;
    transition: width 0.5s ease;
  }

  .progress-text {
    text-align: center;
    font-size: 0.9rem;
    color: #6c757d;
    font-weight: 600;
  }

  /* Flashcard Display */
  .carousel-display {
    position: relative;
    margin-bottom: 30px;
    min-height: 450px;
  }

  .flashcard-container {
    position: relative;
    width: 100%;
  }

  /* Loading Indicator */
  .loading-indicator {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 60px;
    color: #6c757d;
  }

  .loading-spinner {
    width: 40px;
    height: 40px;
    border: 4px solid #e9ecef;
    border-top: 4px solid #007bff;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin-bottom: 16px;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .hidden {
    display: none;
  }

  /* Session Stats */
  .session-stats {
    display: flex;
    justify-content: center;
    gap: 40px;
    padding: 20px;
    background: white;
    border-radius: 12px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    border: 1px solid #dee2e6;
  }

  .stat-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 4px;
  }

  .stat-label {
    font-size: 0.9rem;
    color: #6c757d;
    font-weight: 600;
  }

  .stat-value {
    font-size: 1.5rem;
    font-weight: bold;
    color: #007bff;
    font-family: 'Crimson Text', serif;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .carousel-header {
      flex-direction: column;
      gap: 20px;
    }

    .carousel-actions {
      width: 100%;
      justify-content: center;
    }

    .action-btn {
      flex: 1;
    }

    .session-stats {
      flex-direction: column;
      gap: 16px;
    }

    .stat-item {
      flex-direction: row;
      justify-content: space-between;
    }
  }

  @media (max-width: 480px) {
    .carousel-controls {
      gap: 12px;
    }

    .nav-btn {
      width: 44px;
      height: 44px;
    }

    .carousel-info {
      font-size: 1.3rem;
    }

    .action-btn {
      padding: 8px 12px;
      font-size: 0.8rem;
    }
  }
</style>

<script is:inline define:vars={{ terms, category }}>
  function initializeFlashcardCarousel() {
    let currentIndex = 0;
    let shuffledTerms = [...terms];
    let isAutoPlaying = false;
    let autoPlayInterval = null;
    let studiedCards = new Set();
    
    const flashcardContainer = document.getElementById('flashcardContainer');
    const currentCardNumber = document.getElementById('currentCardNumber');
    // const totalCards = document.getElementById('totalCards');
    const progressFill = document.getElementById('progressFill');
    const progressPercent = document.getElementById('progressPercent');
    const prevBtn = document.getElementById('prevCard');
    const nextBtn = document.getElementById('nextCard');
    const shuffleBtn = document.getElementById('shuffleCards');
    const autoPlayBtn = document.getElementById('autoPlay');
    const autoPlayText = document.getElementById('autoPlayText');
    const cardsStudied = document.getElementById('cardsStudied');
    const correctAnswers = document.getElementById('correctAnswers');
    const accuracyRate = document.getElementById('accuracyRate');
    
    function updateProgress() {
      const progress = studiedCards.size / shuffledTerms.length * 100;
      progressFill.style.width = `${progress}%`;
      progressPercent.textContent = `${Math.round(progress)}%`;
    }
    
    function updateStats() {
      const stats = (window as any).medicalTermsApp ? (window as any).medicalTermsApp.studyStats : { studied: 0, correct: 0 };
      cardsStudied.textContent = stats.studied.toString();
      correctAnswers.textContent = stats.correct.toString();
      const accuracy = stats.studied > 0 ? Math.round((stats.correct / stats.studied) * 100) : 0;
      accuracyRate.textContent = `${accuracy}%`;
    }
    
    function displayCard(index) {
      if (index < 0 || index >= shuffledTerms.length) return;
      
      const term = shuffledTerms[index];
      studiedCards.add(term.id);
      
      // Import the TraditionalFlashcard component dynamically
      flashcardContainer.innerHTML = `
        <div class="flashcard-wrapper" data-card-id="${term.id}" data-index="${index}">
          <div class="card-counter mb-4 text-center">
            <span class="text-gray-600 font-medium">${index + 1} of ${shuffledTerms.length}</span>
          </div>

          <div class="traditional-flashcard group">
            <div class="flashcard-inner">
              <div class="flashcard-side flashcard-front">
                <div class="spiral-binding">
                  <div class="spiral-ring"></div>
                  <div class="spiral-ring"></div>
                  <div class="spiral-ring"></div>
                </div>
                <div class="margin-line"></div>
                <div class="ruled-lines"></div>
                <div class="card-content">
                  <div class="difficulty-indicator" style="background-color: ${getDifficultyColor(term.difficulty)}">
                    ${term.difficulty.toUpperCase()}
                  </div>
                  <div class="term-section">
                    <h2 class="medical-term">${term.term}</h2>
                    <div class="term-underline"></div>
                  </div>
                  <div class="instruction-text">
                    Click to reveal definition
                  </div>
                  <div class="flip-indicator">
                    <svg class="flip-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                    </svg>
                  </div>
                </div>
              </div>

              <div class="flashcard-side flashcard-back">
                <div class="spiral-binding">
                  <div class="spiral-ring"></div>
                  <div class="spiral-ring"></div>
                  <div class="spiral-ring"></div>
                </div>
                <div class="margin-line"></div>
                <div class="ruled-lines"></div>
                <div class="card-content">
                  <div class="difficulty-indicator" style="background-color: ${getDifficultyColor(term.difficulty)}">
                    ${term.difficulty.toUpperCase()}
                  </div>
                  <div class="definition-section">
                    <h3 class="definition-label">Definition:</h3>
                    <p class="definition-text">${term.definition}</p>
                  </div>
                  <div class="example-section">
                    <h4 class="example-label">Clinical Example:</h4>
                    <p class="example-text">${term.example}</p>
                  </div>
                  <div class="flip-indicator">
                    <svg class="flip-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                    </svg>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div class="study-controls mt-6 flex justify-center space-x-4">
            <button class="study-btn study-btn-incorrect" onclick="markIncorrect(this)" title="Mark as incorrect">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
              </svg>
              <span>Need Review</span>
            </button>
            <button class="study-btn study-btn-correct" onclick="markCorrect(this)" title="Mark as correct">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
              </svg>
              <span>Got It!</span>
            </button>
          </div>
        </div>
      `;
      
      // Setup card flipping
      const flashcard = flashcardContainer.querySelector('.traditional-flashcard');
      const inner = flashcard?.querySelector('.flashcard-inner');
      let isFlipped = false;
      
      flashcard?.addEventListener('click', (e) => {
        if (e.target.closest && e.target.closest('.study-btn')) return;
        
        isFlipped = !isFlipped;
        inner?.classList.toggle('flipped', isFlipped);
      });
      
      currentCardNumber.textContent = (index + 1).toString();
      updateNavButtons();
      updateProgress();
      updateStats();
    }
    
    function getDifficultyColor(difficulty) {
      const colors = {
        basic: '#10b981',
        intermediate: '#f59e0b',
        advanced: '#ef4444'
      };
      return colors[difficulty] || colors.basic;
    }
    
    function updateNavButtons() {
      prevBtn.disabled = currentIndex === 0;
      nextBtn.disabled = currentIndex === shuffledTerms.length - 1;
    }
    
    function nextCard() {
      if (currentIndex < shuffledTerms.length - 1) {
        currentIndex++;
        displayCard(currentIndex);
      }
    }
    
    function prevCard() {
      if (currentIndex > 0) {
        currentIndex--;
        displayCard(currentIndex);
      }
    }
    
    function shuffleCards() {
      // Fisher-Yates shuffle
      for (let i = shuffledTerms.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [shuffledTerms[i], shuffledTerms[j]] = [shuffledTerms[j], shuffledTerms[i]];
      }
      
      currentIndex = 0;
      studiedCards.clear();
      displayCard(currentIndex);
      
      // Visual feedback
      shuffleBtn.style.transform = 'rotate(180deg)';
      setTimeout(() => {
        shuffleBtn.style.transform = 'rotate(0deg)';
      }, 300);
    }
    
    function toggleAutoPlay() {
      isAutoPlaying = !isAutoPlaying;
      
      if (isAutoPlaying) {
        autoPlayBtn.classList.add('active');
        autoPlayText.textContent = 'Stop Auto';
        autoPlayInterval = setInterval(() => {
          if (currentIndex < shuffledTerms.length - 1) {
            nextCard();
          } else {
            toggleAutoPlay(); // Stop when reaching the end
          }
        }, 5000); // 5 seconds per card
      } else {
        autoPlayBtn.classList.remove('active');
        autoPlayText.textContent = 'Auto Study';
        if (autoPlayInterval) {
          clearInterval(autoPlayInterval);
          autoPlayInterval = null;
        }
      }
    }
    
    // Event listeners
    prevBtn.addEventListener('click', prevCard);
    nextBtn.addEventListener('click', nextCard);
    shuffleBtn.addEventListener('click', shuffleCards);
    autoPlayBtn.addEventListener('click', toggleAutoPlay);
    
    // Keyboard shortcuts
    document.addEventListener('keydown', (e) => {
      if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') return;
      
      switch (e.key) {
        case 'ArrowLeft':
          e.preventDefault();
          prevCard();
          break;
        case 'ArrowRight':
          e.preventDefault();
          nextCard();
          break;
        case ' ':
        case 'Enter':
          e.preventDefault();
          const flashcard = flashcardContainer.querySelector('.traditional-flashcard');
          if (flashcard) {
            flashcard.click();
          }
          break;
        case 's':
        case 'S':
          e.preventDefault();
          shuffleCards();
          break;
      }
    });
    
    // Global functions for study buttons
    window.markCorrect = function(button) {
      if ((window as any).medicalTermsApp) (window as any).medicalTermsApp.studyStats.studied++;
      if ((window as any).medicalTermsApp) (window as any).medicalTermsApp.studyStats.correct++;
      if ((window as any).medicalTermsApp) (window as any).medicalTermsApp.saveStats();
      updateStats();
      
      button.style.transform = 'scale(1.1)';
      setTimeout(() => {
        button.style.transform = 'scale(1)';
      }, 200);
    };
    
    window.markIncorrect = function(button) {
      if ((window as any).medicalTermsApp) (window as any).medicalTermsApp.studyStats.studied++;
      if ((window as any).medicalTermsApp) (window as any).medicalTermsApp.saveStats();
      updateStats();
      
      button.style.transform = 'scale(1.1)';
      setTimeout(() => {
        button.style.transform = 'scale(1)';
      }, 200);
    };
    
    // Initialize first card
    displayCard(0);
    updateStats();
  }
  
  document.addEventListener('DOMContentLoaded', initializeFlashcardCarousel);
</script>