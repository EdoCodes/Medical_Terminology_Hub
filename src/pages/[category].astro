---
import Layout from '../layouts/Layout.astro';
import CleanHeader from '../components/CleanHeader.astro';
import CleanFooter from '../components/CleanFooter.astro';
import StudyInterface from '../components/StudyInterface.astro';
import medicalTerms from '../data/medicalTerms.json';

export function getStaticPaths() {
  // Get unique categories from the terms
  const categories = [...new Set(medicalTerms.terms?.map((term: any) => term.category.toLowerCase()) || [])];
  return categories.map(category => ({
    params: { category },
  }));
}

const { category } = Astro.params;
// Filter terms by category (case-insensitive)
const terms = medicalTerms.terms?.filter((term: any) => 
  term.category.toLowerCase() === category.toLowerCase()
) || [];

if (!terms.length) {
  return Astro.redirect('/404');
}

const categoryTerms = terms;

// Category display information
const categoryInfo = {
  cardiovascular: { name: 'Cardiovascular', icon: 'CARD', description: 'Heart and circulation terminology' },
  respiratory: { name: 'Respiratory', icon: 'RESP', description: 'Lung and breathing terminology' },
  neurology: { name: 'Neurology', icon: 'NEUR', description: 'Brain and nervous system terminology' },
  dermatology: { name: 'Dermatology', icon: 'DERM', description: 'Skin and dermatological terminology' },
  musculoskeletal: { name: 'Musculoskeletal', icon: 'MUSC', description: 'Bone, muscle, and joint terminology' },
  gastroenterology: { name: 'Gastroenterology', icon: 'GAST', description: 'Digestive system terminology' },
  endocrinology: { name: 'Endocrinology', icon: 'ENDO', description: 'Hormone and endocrine system terminology' },
  hematology: { name: 'Hematology', icon: 'HEMA', description: 'Blood and blood disorder terminology' },
  oncology: { name: 'Oncology', icon: 'ONCO', description: 'Cancer and tumor terminology' },
  immunology: { name: 'Immunology', icon: 'IMMU', description: 'Immune system terminology' },
  nephrology: { name: 'Nephrology', icon: 'NEPH', description: 'Kidney and urinary system terminology' },
  obstetrics: { name: 'Obstetrics', icon: 'OBST', description: 'Pregnancy and childbirth terminology' },
  ophthalmology: { name: 'Ophthalmology', icon: 'OPHT', description: 'Eye and vision terminology' },
  otolaryngology: { name: 'Otolaryngology', icon: 'ENT', description: 'Ear, nose, and throat terminology' },
  psychiatry: { name: 'Psychiatry', icon: 'PSYC', description: 'Mental health terminology' },
  radiology: { name: 'Radiology', icon: 'RADI', description: 'Medical imaging terminology' },
  surgery: { name: 'Surgery', icon: 'SURG', description: 'Surgical procedure terminology' },
  pharmacology: { name: 'Pharmacology', icon: 'PHAR', description: 'Drug and medication terminology' },
  emergency: { name: 'Emergency Medicine', icon: 'EMRG', description: 'Emergency medical terminology' },
  pathology: { name: 'Pathology', icon: 'PATH', description: 'Disease and diagnostic terminology' }
};

const currentCategory = categoryInfo[category] || { name: category, icon: 'MED', description: 'Medical terminology' };
---

<Layout title={`${currentCategory.name} - Medical Terminology Hub`} description={`Study ${currentCategory.description} with interactive flashcards. ${terms.length} medical terms to master.`}>
  <CleanHeader />
  
  <main class="clean-main">
    <StudyInterface terms={categoryTerms} category={category} />
  </main>

  <CleanFooter />
</Layout>

<style>
  .clean-main {
    min-height: calc(100vh - 140px);
    background: #f8f9fa;
  }

  /* Global clean styles */
  :global(body) {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
    line-height: 1.5;
    color: #1f2937;
    background: #f8f9fa;
  }

  :global(*) {
    box-sizing: border-box;
  }

  :global(h1, h2, h3, h4, h5, h6) {
    margin: 0;
    font-weight: 600;
  }

  :global(p) {
    margin: 0;
  }

  :global(button) {
    font-family: inherit;
  }

  :global(a) {
    color: inherit;
    text-decoration: none;
  }

  /* Smooth scrolling */
  :global(html) {
    scroll-behavior: smooth;
  }

  /* Focus styles */
  :global(:focus-visible) {
    outline: 2px solid #4A90E2;
    outline-offset: 2px;
  }

  /* Selection styles */
  :global(::selection) {
    background: #4A90E2;
    color: white;
  }

  /* Loading animation for content */
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .clean-main {
    animation: fadeIn 0.5s ease-out;
  }
</style>